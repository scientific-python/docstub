[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
name = "docstub"
maintainers = [
  {name = "Lars GrÃ¼ter"},
]
description = "Generate Python stub files from docstrings"
readme = "README.md"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
requires-python = ">=3.12"
keywords = ["typing", "stub files", "docstings", "numpydoc"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Scientific/Engineering",
]
dynamic = ["version"]
dependencies = [
  "numpydoc >=1.7.0",
  "click >=8.1.7",
  "libcst >=1.3.1",
  "lark >=1.1.9",
  "black >=24.4.2",
  "isort >=5.13.2",
]

[project.optional-dependencies]
dev = [
  "pre-commit >=3.7",
  "ipython",
]
test = [
  "pytest >=5.0.0",
  "pytest-cov >= 5.0.0",
  "mypy",
  "basedpyright",
]

[project.urls]
Homepage = "https://github.com/lagru/docstub"

[project.scripts]
docstub = "docstub.__main__:cli"


[tool.setuptools_scm]
write_to = "src/docstub/_version.py"


[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "C4",       # flake8-comprehensions
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
#  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "RET504",   # Assignment before `return` statement facilitates debugging
  "PTH123",   # Using builtin open() instead of Path.open() is fine
  "SIM108",   # Terniary operator is always more readable
  "SIM103",   # Don't recommend returning the condition directly
]


[tool.pytest.ini_options]
addopts = "--doctest-modules"
testpaths = [
    "src",
    "tests",
]


[tool.coverage]
run.source = ["docstub"]


[tool.changelist.label_section_map]
".*enhancement.*" = "Enhancement"
".*performance.*" = "Performance"
".*fix.*" = "Bug Fixes"
".*documentation.*" = "Documentation"
".*devops.*" = "DevOps"
".*maintenance.*" = "Maintenance"


[tool.docstub.types]
Path = "pathlib"

[tool.docstub.type_prefixes]
cst = "libcst"
lark = "lark"
numpydoc = "numpydoc"


[tool.mypy]
strict = true
disable_error_code = ["type-arg"]

# Don't type test suite itself but check if usage makes sense with docstub's stubs
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = true
allow_untyped_defs = true
disable_error_code = ["var-annotated", "union-attr"]

# NumPyDoc isn't typed?
[[tool.mypy.overrides]]
module = ["numpydoc.*"]
ignore_missing_imports = true


[tool.basedpyright]
stubPath = "stubs/"
typeCheckingMode = "standard"
