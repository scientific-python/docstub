[build-system]
requires = ["setuptools>=61", "setuptools-scm[simple]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "docstub"
maintainers = [
    {name = "Lars GrÃ¼ter"},
]
description = "Generate Python stub files from docstrings"
readme = "README.md"

# Need to include license of vendored code as well
license = "BSD-3-Clause AND PSF-2.0"
license-files = ["LICENSE.txt"]

requires-python = ">=3.12"
keywords = ["typing", "stub files", "docstings", "numpydoc"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering",
]
dynamic = ["version"]
dependencies = [
    "numpydoc >=1.7.0",
    "click >=8.1.7",
    "libcst >=1.3.1",
    "lark >=1.1.9",
    "black >=24.4.2",
    "isort >=5.13.2",
]

[project.urls]
Homepage = "https://github.com/lagru/docstub"

[project.scripts]
docstub = "docstub.__main__:cli"


[dependency-groups]
test = [
    "pytest >=8.4.1",
    "pytest-cov >= 5.0.0",
    "mypy >=1.17.0",
    "basedpyright >=1.31",
]
docs = [
    "sphinx",
    "furo ==2025.9.25",
    "numpydoc",
    "myst-parser",
    "sphinx-copybutton",
    "setuptools-scm[simple] >=8"
]
dev = [
    {include-group = "test"},
    {include-group = "docs"},
    "pre-commit >=4.3.0",
    "ipython",
]


[tool.setuptools_scm]
write_to = "src/docstub/_version.py"


[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
extend-select = [
    "B",        # flake8-bugbear
    "I",        # isort
    "C4",       # flake8-comprehensions
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "RET",      # flake8-return
    "RUF",      # Ruff-specific
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "EXE",      # flake8-executable
#    "PYI",      # flake8-pyi
]
ignore = [
    "PLR09",    # Too many <...>
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Conflicts with formatter
    "RET504",   # Assignment before `return` statement facilitates debugging
    "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
    "PTH123",   # Using builtin open() instead of Path.open() is fine
    "SIM108",   # Terniary operator is always more readable
    "SIM103",   # Don't recommend returning the condition directly
]


[tool.pytest.ini_options]
minversion = "8"
addopts = [
    "-ra",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
    "--doctest-modules"
]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = ["src", "tests"]


[tool.coverage]
run.source = ["docstub"]


[tool.changelist.label_section_map]
".*enhancement.*" = "Enhancement"
".*(deprecation|API).*" = "Deprecations"
".*performance.*" = "Performance"
".*fix.*" = "Bug Fixes"
".*documentation.*" = "Documentation"
".*devops.*" = "DevOps"
".*maintenance.*" = "Maintenance"


[tool.docstub.types]
Path = "pathlib"


[tool.mypy]
strict = true
warn_unreachable = false
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["type-arg"]

# Don't type test suite itself but check if usage makes sense with docstub's stubs
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = true
allow_untyped_defs = true
disable_error_code = ["var-annotated", "union-attr"]

# NumPyDoc isn't typed?
[[tool.mypy.overrides]]
module = ["numpydoc.*"]
ignore_missing_imports = true


[tool.basedpyright]
typeCheckingMode = "standard"
