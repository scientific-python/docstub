?start : annotation

// ----------------------------------------------------------------------------
annotation : types_or ("," optional)? ("," extra_info)?

?types_or : type (("or" | "|") type)*

?type : qualname
      | sphinx_ref
      | container
      | shape_n_dtype
      | literals

optional : "optional"
         | "default" ("=" | ":")? literal

extra_info : /[^\r\n]+/

sphinx_ref : (":" (NAME ":")? NAME ":")? "`" qualname "`"

container: qualname "[" types_or ("," types_or)* ("," PY_ELLIPSES)? "]"
         | qualname "of" type   // TODO allow plural somehow, e.g. "list of int(s)"?
         | qualname "of" "(" types_or ("," types_or)* ("," PY_ELLIPSES)? ")"
         | qualname "of" "{" types_or ":" types_or "}"

// Name with leading dot separated path
qualname : (/~/ ".")? (NAME ".")* NAME


// ----------------------------------------------------------------------------
// Array-like form with dtype or shape information

shape_n_dtype : shape? array_name ("of" dtype)?
              | shape? array_name "of" dtype
              | shape dtype array_name
              | dtype array_name
              | array_name "of shape" shape ("and dtype" dtype)?
              | array_name "of dtype" dtype ("and shape" shape)?
// Use rule and terminal to capture the array name and its context
// TODO figure out way not to leak implementation here
array_name : ARRAY_NAME
ARRAY_NAME : "array" | "ndarray" | "array-like" | "array_like"

dtype : qualname
shape : "(" dim ",)"
      | "(" leading_optional? dim (("," dim | insert_optional))* ")"
      | NUMBER "-"? "D"
leading_optional : "[" dim ("," dim)* ",]"
insert_optional : "[," dim ("," dim)* "]"
?dim : NUMBER
     | PY_ELLIPSES
     | NAME ("=" NUMBER)?


// ----------------------------------------------------------------------------
// Python
literals : "{" literal ("," literal)* "}"

literal : PY_ELLIPSES
        | STRING
        | NUMBER
        | NAME

PY_ELLIPSES : "..."

NAME: /[^\W\d][\w-]*/


// ----------------------------------------------------------------------------
// imports
%import python (STRING)
%import common (NEWLINE, NUMBER, LETTER, TEXT, WS)

%ignore WS
